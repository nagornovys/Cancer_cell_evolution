library(abc)
W <- read.csv2(file = "VAF/VAF_data.csv", header = TRUE)
W$Tumor_Sample_Barcode <- as.character( W$Tumor_Sample_Barcode )
x <- W[which(W$FILTER == "PASS"),]
y <- x[which(x$Hugo_Symbol == "APC" | x$Hugo_Symbol == "KRAS" | x$Hugo_Symbol == "TP53" | x$Hugo_Symbol == "PIK3CA" ),]
z <- table(y$Tumor_Sample_Barcode)
s <- names(z[which(z < 5)])   # s - id of patients with 1 mutation / gene (probably)
x <- NULL
W <- NULL
v_TR <- rep(TRUE,length(s))
for (u in 1:length(s)) {
id_patient <- s[u]
gns <- as.character( y$Hugo_Symbol[ which(y$Tumor_Sample_Barcode == id_patient) ] )
if ( length(unique(gns)) != length(gns)   ) v_TR[u] <- FALSE   # exclude double mutations
}
# names of patients with only 1 mutation for 1 gene or less
s <- s[v_TR]
W <- y
read_vaf_for_1_patient <- function(id_patient, W) {
W1 <- W[(W$Tumor_Sample_Barcode == id_patient),]
# to find patient with all genes:
if (FALSE) {
x <- W$Tumor_Sample_Barcode[which(W$Hugo_Symbol == "APC")]
y <- W$Tumor_Sample_Barcode[which(W$Hugo_Symbol == "KRAS")]
z <- W$Tumor_Sample_Barcode[which(W$Hugo_Symbol == "TP53")]
s <- W$Tumor_Sample_Barcode[which(W$Hugo_Symbol == "PIK3CA")]
patients <- intersect(
intersect(x,y),
intersect(z,s)
)
which(W1$Hugo_Symbol == "APC")
which(W1$Hugo_Symbol == "KRAS")
which(W1$Hugo_Symbol == "TP53")
which(W1$Hugo_Symbol == "PIK3CA")
}
############################
data.target <- as.data.frame(matrix(data = 0, nrow = 1, ncol = 5 ))
# names(data.sim) <- c("0-0.1","0.1-0.2", "0.2-0.3", "0.3-0.4", "0.4-0.5", "0.5-0.6", "0.6-0.7", "0.7-0.8", "0.8-0.9", "0.9-1", "Exist")
names(data.target) <- c("APC", "KRAS", "TP53", "PIK3CA", "Exist")
data.target[1] <- W1$t_VAF[which(W1$Hugo_Symbol == "APC")]
data.target[2] <- W1$t_VAF[which(W1$Hugo_Symbol == "KRAS")]
data.target[3] <- W1$t_VAF[which(W1$Hugo_Symbol == "TP53")]
data.target[4] <- W1$t_VAF[which(W1$Hugo_Symbol == "PIK3CA")]
data.target[5] <- 1
data.target[is.na(data.target)] <- 0
return(data.target)
}
id_patient <- s[20] ##  please, choose from s vector of names
data.target <- read_vaf_for_1_patient(id_patient,W)
data.sim <- read.table(file = "data_sim.txt", header = TRUE, sep = " ")
data.param <- read.table(file = "data_param.txt", header = TRUE, sep = " ")
del_vect <- ( data.sim$Exist == 1 )
data.sim <- data.sim[ del_vect, ]
data.param <- data.param[ del_vect, ]
data.sim <- data.sim[,-5]
data.param <- data.param[,-23]
data.target <- data.target[,-5]
method_abc <- "rejection"
method_abc_a <- "loclinear"
method_abc_a <- "ridge"
rejection <- abc( target = data.target, param = data.param, sumstat = data.sim, tol = 0.002, method = method_abc)
rejection_a <- abc( target = data.target, param = data.param, sumstat = data.sim, tol = 0.002, method = method_abc_a)
method_abc_a <- "rejection"
method_abc <- "rejection"
rejection <- abc( target = data.target, param = data.param, sumstat = data.sim, tol = 0.002, method = method_abc)
rejection_a <- abc( target = data.target, param = data.param, sumstat = data.sim, tol = 0.002, method = method_abc_a)
two_hist <- function(p, data.param, rejection, rejection_a,in_coef,log_scale) {
nm_param <- names(data.param[p])
xl <- range(0, rejection$unadj.values[,p], rejection_a$unadj.values[,p])
xl[2] <- max(1,round(xl[2], digits = 1))
br <- (0:20) / 20 * (xl[2] - xl[1])
p1 <- hist(rejection$unadj.values[,p], plot = F, xlim = xl, breaks = br)
p2 <- hist(rejection_a$unadj.values[,p], plot = F, xlim = xl, breaks = br)
# p1$counts <- p1$counts / max(p1$counts)
# p2$counts <- p2$counts / max(p2$counts)
p2$counts <- in_coef * p2$counts
yl <- range(p1$counts,p2$counts)
plot(p1, col = "skyblue", main = NULL, xlab = nm_param, ylab = NULL,border=T, ylim = yl)
plot(p2, add = T, col = "red", border= "red", density=40, angle=60) # , density=10, angle=45)
}
two_hist_log <- function(p, data.param, rejection, rejection_a,in_coef,log_scale) {
nm_param <- names(data.param[p])
xl <- range(min(log(rejection$unadj.values[,p]), log(rejection_a$unadj.values[,p])),
max(log(rejection$unadj.values[,p]), log(rejection_a$unadj.values[,p])))
br <- 10  # (0:10) / 10 * (xl[2] - xl[1])
p1 <- hist(log(rejection$unadj.values[,p]), plot = F, xlim = xl, breaks = br)
p2 <- hist(log(rejection_a$unadj.values[,p]), plot = F, xlim = xl, breaks = br)
# p1$counts <- p1$counts / max(p1$counts)
# p2$counts <- p2$counts / max(p2$counts)
p2$counts <- in_coef * p2$counts
yl <- range(p1$counts,p2$counts)
plot(p1, col = "skyblue", main = NULL, xlab = paste0("log of ",nm_param), ylab = NULL,border=T, ylim = yl)
plot(p2, add = T, col = "red", border= "red", density=40, angle=60) # , density=10, angle=45)
}
in_coef <- 1
log_scale <- FALSE
par(mfrow=c(2,2))
for (p in 1:4) {  two_hist(p, data.param, rejection, rejection_a,in_coef,log_scale)  }
par(mfrow=c(2,2))
for (p in 5:8) { two_hist(p, data.param, rejection, rejection_a,in_coef,log_scale)  }
par(mfrow=c(2,2))
for (p in 9:12) { two_hist(p, data.param, rejection, rejection_a,in_coef,log_scale)  }
rejection <- abc( target = data.target, param = data.param, sumstat = data.sim, tol = 0.02, method = method_abc)
in_coef <- 1
log_scale <- FALSE
par(mfrow=c(2,2))
for (p in 1:4) {  two_hist(p, data.param, rejection, rejection_a,in_coef,log_scale)  }
par(mfrow=c(2,2))
for (p in 5:8) { two_hist(p, data.param, rejection, rejection_a,in_coef,log_scale)  }
par(mfrow=c(2,2))
for (p in 9:12) { two_hist(p, data.param, rejection, rejection_a,in_coef,log_scale)  }
par(mfrow=c(2,2))
for (p in 13:16) { two_hist(p, data.param, rejection, rejection_a,in_coef,log_scale)  }
par(mfrow=c(2,2))
for (p in c(17,18,20,21) ) { two_hist(p, data.param, rejection, rejection_a,in_coef,log_scale)  }
log_scale <- TRUE
par(mfrow=c(2,2))
for (p in c(19,22)) { two_hist_log(p, data.param, rejection, rejection_a,in_coef,log_scale)  }
par(mfrow=c(1,1))
